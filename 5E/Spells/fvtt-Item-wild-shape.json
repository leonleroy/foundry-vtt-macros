{
  "name": "Wild Shape",
  "type": "feat",
  "img": "icons/creatures/mammals/elk-moose-marked-green.webp",
  "data": {
    "description": {
      "value": "<p>Starting at 2nd level, you can use your action to magically assume the shape of a beast that you have seen before. You can use this feature twice. You regain expended uses when you finish a short or long rest.</p><p>Your druid level determines the beasts you can transform into, as shown in the Beast Shapes table. At 2nd level, for example, you can transform into any beast that has a challenge rating of 1/4 or lower that doesn't have a flying or swimming speed.</p>\n<h4><strong>Beast Shapes</strong></h4>\n<table border=\"1\">\n<tbody>\n<tr>\n<td><strong>Level</strong></td>\n<td><strong>Max. CR</strong></td>\n<td><strong>Limitations</strong></td>\n<td><strong>Example</strong></td>\n</tr>\n<tr>\n<td>2nd</td>\n<td>1/4</td>\n<td>No flying or swimming speed</td>\n<td>@Compendium[dnd5e.monsters.yawTeS8u2FCfzzZH]{Wolf}</td>\n</tr>\n<tr>\n<td>4th</td>\n<td>1/2</td>\n<td>No flying speed</td>\n<td>@Compendium[dnd5e.monsters.8aCTKP5qaBPFOqxM]{Crocodile}</td>\n</tr>\n<tr>\n<td>8th</td>\n<td>1</td>\n<td>--</td>\n<td>@Compendium[dnd5e.monsters.DBCCRXiLn6mIS8hX]{Giant Eagle}</td>\n</tr>\n</tbody>\n</table>\n<p>You can stay in a beast shape for a number of hours equal to half your druid level (rounded down). You then revert to your normal form unless you expend another use of this feature. You can revert to your normal form earlier by using a bonus action on your turn. You automatically revert if you fall unconscious, drop to 0 hit points, or die.</p><p>While you are transformed, the following rules apply:</p>\n<ul>\n<li>\n<p>Your game statistics are replaced by the statistics of the beast, but you retain your alignment, personality, and Intelligence, Wisdom, and Charisma scores. You also retain all of your skill and saving throw proficiencies, in addition to gaining those of the creature. If the creature has the same proficiency as you and the bonus in its stat block is higher than yours, use the creature's bonus instead of yours. If the creature has any legendary or lair actions, you can't use them.</p>\n</li>\n<li>\n<p>When you transform, you assume the beast's hit points and Hit Dice. When you revert to your normal form, you return to the number of hit points you had before you transformed. However, if you revert as a result of dropping to 0 hit points, any excess damage carries over to your normal form. For example, if you take 10 damage in animal form and have only 1 hit point left, you revert and take 9 damage. As long as the excess damage doesn't reduce your normal form to 0 hit points, you aren't knocked unconscious.</p>\n</li>\n<li>\n<p>You can't cast spells, and your ability to speak or take any action that requires hands is limited to the capabilities of your beast form. Transforming doesn't break your concentration on a spell you've already cast, however, or prevent you from taking actions that are part of a spell, such asÂ call lightning, that you've already cast.</p>\n</li>\n<li>\n<p>You retain the benefit of any features from your class, race, or other source and can use them if the new form is physically capable of doing so. However, you can't use any of your special senses, such as darkvision, unless your new form also has that sense.</p>\n</li>\n<li>\n<p>You choose whether your equipment falls to the ground in your space, merges into your new form, or is worn by it. Worn equipment functions as normal, but the GM decides whether it is practical for the new form to wear a piece of equipment, based on the creature's shape and size. Your equipment doesn't change size or shape to match the new form, and any equipment that the new form can't wear must either fall to the ground or merge with it. Equipment that merges with the form has no effect until you leave the form.</p>\n</li>\n</ul>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 66",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "@classes.druid.levels > 19 ? 99 : 2",
      "per": "lr",
      "type": "sr"
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell",
      "value": ""
    },
    "requirements": "Druid 2",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "effects": [],
  "flags": {
    "core": {
      "sourceId": "Compendium.dnd5e.classfeatures.swK0r5TOIxredxWS"
    },
    "spellTemplateManager": {
      "stmData": {
        "ignoreDuration": false,
        "spellTexture": "",
        "useTexture": false,
        "alpha": 50,
        "coneOrigin": 1,
        "loopAnimations": true
      }
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Wild Shape",
          "type": "script",
          "author": "sGDyf0LH8KxxtfaW",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "// Original script: https://gitlab.com/Freeze020/foundry-vtt-scripts/-/blob/master/DnD5e%20specific%20macros/Wildshape/WildShape-player.js\n// Special thanks to Freeze for the original macro\n// Thanks to Crymic and IanM32 for the support/ideas\n// Requires the following permissions: CREATE NEW ACTORS, CREATE NEW ITEMS\n// Requires the following modules: Dynamic Active Effects, Item Macros, Times-Up, About-Time\n\nconst subClassName = \"Circle of the Moon\"; // change if that is not your SubClass name for Circle of the Moon\nconst CompendiumName = \"Shapes Compendium\";\nconst RevertKeyWord = \"Revert\";\n\nif (args[0] === \"on\") {\n    return\n}\nif ((args[0] === \"off\") || (item.name.includes(RevertKeyWord))) {\n    await ActorRevertBack();\n    return\n}\n\nawait ActorRevertBack();\n\n\nlet CompNameCheckOK = game.packs.contents.find(l => l.metadata.label === CompendiumName);\nif (CompNameCheckOK) {\n    var packName = CompNameCheckOK.metadata.package + '.' + CompNameCheckOK.metadata.name;\n} else {\n    return ui.notifications.info(\"There is no \" + CompendiumName + \" , please create and add at least one beast!\");\n}\n\n\nconst macroToken = token;\nconst druid = macroToken.actor.items.find(i => i.name == \"Druid\" && i.type == \"class\");\n\nif (!druid) {\n    return ui.notifications.info(\"you are not a Druid, dont try to bamboozle the game ;)\");\n}\n\nconst DurationInSeconds = Math.floor(druid.data.data.levels / 2) * 3600;\n\n// Declare the WildShape Effect\nlet applyWildShapeEffect = {\n    changes: [{\n        key: \"macro.itemMacro\",\n        mode: 0,\n        value: `ItemMacro.${item.name}`,\n        priority: 20\n    }],\n    label: item.name,\n    origin: item.uuid,\n//    icon: \"systems/dnd5e/icons/skills/green_13.jpg\",\n      icon: item.data.img,\n    duration: {\n        \"seconds\": DurationInSeconds,\n        startTime: game.time.worldTime\n    },\n}\n\nlet maxCR = 0;\nif (druid.data.data.subclass !== subClassName) {\n    maxCR = (druid.data.data.levels > 7) ? 1 : (druid.data.data.levels > 3) ? 0.5 : (druid.data.data.levels > 1) ? 0.25 : 0;\n} else {\n    maxCR = (druid.data.data.levels > 17) ? 6 : (druid.data.data.levels > 14) ? 5 : (druid.data.data.levels > 11) ? 4 : (druid.data.data.levels > 8) ? 3 : (druid.data.data.levels > 5) ? 2 : 1;\n}\n\nconst resourceKey = Object.keys(macroToken.actor.data.data.resources).filter(k => macroToken.actor.data.data.resources[k].label === item.name).shift();\n\nif (druid.data.data.levels < 10 || druid.data.data.subclass !== subClassName || macroToken.actor.data.data.resources[resourceKey].value < 2) {\n    await selectShape(\"beast\");\n} else {\n\n    new Dialog({\n        title: `select your Wildshape method`,\n        contents: ``,\n        buttons: {\n            option_1: {\n                icon: `<i class=\"fas fa-paw\"></i>`,\n                label: `Beast Wildshape`,\n                callback: async () => {\n                    await selectShape(\"beast\");\n                },\n            },\n            option_2: {\n                icon: `<i class=\"fab fa-react\"></i>`,\n                label: `Elemental Wildshape`,\n                callback: async () => {\n                    await selectShape(\"elemental\");\n                },\n            }\n        },\n        default: \"option_1\",\n    }).render(true);\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nasync function selectShape(type) {\n    let beastDialogOptions = \"\";\n    let elemDialogOptions = \"\";\n    let compendium = (await game.packs.get(packName).getDocuments()).sort((a, b) => b.data.data.details.cr - a.data.data.details.cr);\n    for (let shapeOption of compendium) {\n        if (shapeOption.name.toLowerCase().includes(\"elemental\")) {\n            elemDialogOptions += `<option value=${shapeOption.id}> ${shapeOption.name} |  ${shapeOption.data.data.attributes.hp.value} hit-points</option>`;\n        } else {\n\n            const fly = shapeOption.data.data.attributes.movement.fly;\n            const swim = shapeOption.data.data.attributes.movement.swim;\n            //\t\t\tconsole.log(shapeOption.name,' Fly: ', fly, ' Swim: ',swim);\n            const specialMovement = (fly !== 0 && fly !== null) ? \"fly\" : (swim !== 0 && swim !== null) ? \"swim\" : \"none\"\n            if ((druid.data.data.levels < 9 && specialMovement == \"fly\" && druid.data.data.subclass !== subClassName)) {\n                continue;\n            } else if ((druid.data.data.levels < 5 && specialMovement == \"swim\" && druid.data.data.subclass !== subClassName)) {\n                continue;\n            } else if ((druid.data.data.levels < 7 && specialMovement == \"fly\" && druid.data.data.subclass === subClassName)) {\n                continue;\n            } else if ((druid.data.data.levels < 4 && specialMovement == \"swim\" && druid.data.data.subclass === subClassName)) {\n                continue;\n            } else {\n                if (shapeOption.data.data.details.cr > maxCR) {\n                    continue;\n                }\n                beastDialogOptions += `<option value=${shapeOption.id}> ${shapeOption.name} | ${shapeOption.data.data.attributes.hp.value} hit-points | ${shapeOption.data.data.details.cr} CR</option>`;\n            }\n        }\n    }\n    let dialogOptions = type == \"beast\" ? beastDialogOptions : elemDialogOptions;\n    let dialogContent = `<form>\n                        <h2> Select your shape here </h2>\n                        <div class=\"form-group\"><label>Shape name:</label><select name=\"shape\">${dialogOptions}</select></div>\n                        </form>`;\n    new Dialog({\n        title: \"Beast Wild Shape\",\n        content: dialogContent,\n        buttons: {\n            accept_button: {\n                label: `<i class=\"fas fa-paw\"></i>Wild Shape!`,\n                callback: async (html) => {\n                    const shapeId = html.find(\"[name=shape]\")[0].value;\n                    const newShape = compendium.find(shape => shape.id === shapeId)\n\n                    let CompNameFull = CompNameCheckOK.metadata.package + '.' + CompNameCheckOK.metadata.name\n\n                    await ChatMessage.create({\n                        content: `<br>Turns into a @Compendium[${CompNameFull}.${newShape.id}].`,\n                        speaker: {\n                            alias: macroToken.actor.name\n                        },\n                        type: CONST.CHAT_MESSAGE_TYPES.OOC\n                    });\n\n                    let addRevert = macroToken.actor.items.getName(item.name).toObject();\n                    addRevert.name = RevertKeyWord + \" \" + item.name;\n                    addRevert.data.uses.max = 0;\n                    addRevert.data.uses.value = 0;\n                    addRevert.data.uses.per = \"\";\n                    addRevert.data.uses.type = \"\";\n                    addRevert.data.activation.type = \"bonus\";\n                    addRevert.data.description.value = \"<p>You can stay in a beast shape for a number of hours equal to half your druid level (rounded down). You then revert to your normal form unless you expend another use of this feature. You can revert to your normal form earlier by using a bonus action on your turn. You automatically revert if you fall unconscious, drop to 0 hit points, or die.</p>\"\n\n                    const [newToken] = await macroToken.actor.transformInto(newShape, {\n                        keepMental: true,\n                        keepClass: true,\n                        mergeSaves: true,\n                        mergeSkills: true,\n                    });\n\n                    await newToken.actor.createEmbeddedDocuments(\"ActiveEffect\", [applyWildShapeEffect]);\n                    await newToken.actor.createEmbeddedDocuments(\"Item\", [addRevert]);\n\n                    if (druid.data.data.levels > 5) {\n                        const updates = newToken.actor.itemTypes.weapon.filter(i => i.data.data.weaponType === \"natural\").map(i => ({\n                            _id: i.id,\n                            \"data.properties.mgc\": true\n                        }));\n                        await newToken.actor.updateEmbeddedDocuments(\"Item\", updates);\n                    }\n                }\n            }\n        },\n        default: \"accept_button\"\n    }).render(true);\n}\n\n\nfunction ActorRevertBack() {\n    if (token.actor.isPolymorphed) {\n        ChatMessage.create({\n            content: `<br>Reverts to <b>original form</b>.`,\n            speaker: {\n                alias: token.actor.name\n            },\n            type: CONST.CHAT_MESSAGE_TYPES.OOC\n        });\n        token.actor.revertOriginalForm();\n        return;\n    }\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false,
      "set1s": false,
      "set2s": false,
      "set3s": false
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[preActiveEffects]ItemMacro"
    },
    "exportSource": {
      "world": "5etest",
      "system": "dnd5e",
      "coreVersion": "9.242",
      "systemVersion": "1.5.7"
    }
  }
}